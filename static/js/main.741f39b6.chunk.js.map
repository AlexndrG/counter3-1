{"version":3,"sources":["components/Display/Display.module.css","components/Changer/Changer.module.css","components/CounterSettings/CounterSettings.module.css","components/Counter/Counter.module.css","components/CounterWithParams/CounterWithParams.module.css","components/Button/Button.module.css","store/counter-reducer.ts","store/counterSettings-reducer.ts","store/store.ts","utils/localStorage-utils.ts","components/Display/Display.tsx","components/Button/Button.tsx","components/Counter/Counter.tsx","components/Changer/Changer.tsx","components/CounterSettings/CounterSettings.tsx","components/CounterWithParams/CounterWithParams.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","initialState","counter","minValue","maxValue","text","error","setCounterValue","value","type","makeMessage","buttonDisabled","minError","maxError","setButtonDisabled","reducers","combineReducers","state","action","counterSettings","store","createStore","serializedState","localStorage","getItem","loadedState","JSON","parse","loadFromLocalStorage","subscribe","setItem","stringify","saveToLocalStorage","getState","Display","props","displayValue","addClassName","s","textOK","textError","counterValue","toString","counterOK","counterFinish","className","display","Button","button","disabled","onClick","callback","name","Counter","counterState","useSelector","dispatch","useDispatch","main","buttons","Changer","input","onChange","e","changeValue","currentTarget","valueAsNumber","CounterSettings","allState","checkError","setMaxError","changers","CounterWithParams","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.741f39b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2tMqQ\",\"counterOK\":\"Display_counterOK__oh4WL\",\"counterFinish\":\"Display_counterFinish__823N7\",\"textOK\":\"Display_textOK__1ZNKX\",\"textError\":\"Display_textError__2AkCl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Changer_main__2giff\",\"name\":\"Changer_name__2uJKh\",\"input\":\"Changer_input__1u77M\",\"error\":\"Changer_error__3jKR1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"CounterSettings_main__32TVI\",\"changers\":\"CounterSettings_changers__3hC1_\",\"buttons\":\"CounterSettings_buttons__3JWZ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Counter_main__GgNRR\",\"buttons\":\"Counter_buttons__1bQDg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"CounterWithParams_main__z9vwY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__uPfkH\"};","export const INIT_MIN_VALUE = 0;\r\nexport const INIT_MAX_VALUE = 5;\r\n\r\nconst initialState = {\r\n    counter: INIT_MIN_VALUE,\r\n    minValue: INIT_MIN_VALUE,\r\n    maxValue: INIT_MAX_VALUE,\r\n    text: '',\r\n    error: false,\r\n}\r\n\r\nexport type CounterStateType = typeof initialState\r\n\r\n\r\n\r\ntype SetCounterType = {\r\n    type: 'SET_COUNTER_VALUE'\r\n    value: number\r\n}\r\ntype SetMinValueType = {\r\n    type: 'SET_MIN_VALUE'\r\n    value: number\r\n}\r\ntype SetMaxValueType = {\r\n    type: 'SET_MAX_VALUE'\r\n    value: number\r\n}\r\n\r\ntype MakeMessageType = {\r\n    type: 'MAKE_MESSAGE'\r\n    text: string\r\n    error: boolean\r\n}\r\ntype SetButtonPressedType = {\r\n    type: 'SET_BUTTON_PRESSED'\r\n}\r\n\r\nexport type ActionsType =\r\n    SetCounterType\r\n    | SetMinValueType\r\n    | SetMaxValueType\r\n    | MakeMessageType\r\n    | SetButtonPressedType\r\n\r\nexport const counterReducer = (state: CounterStateType = initialState, action: ActionsType): CounterStateType => {\r\n    switch (action.type) {\r\n        case 'SET_COUNTER_VALUE': {\r\n            return {\r\n                ...state,\r\n                counter: action.value\r\n            }\r\n        }\r\n        case 'SET_MIN_VALUE': {\r\n            return {\r\n                ...state,\r\n                minValue: action.value\r\n            }\r\n        }\r\n        case 'SET_MAX_VALUE': {\r\n            return {\r\n                ...state,\r\n                maxValue: action.value\r\n            }\r\n        }\r\n\r\n        case 'MAKE_MESSAGE': {\r\n            return {\r\n                ...state,\r\n                text: action.text,\r\n                error: action.error\r\n            }\r\n        }\r\n\r\n        case 'SET_BUTTON_PRESSED': {\r\n            return {\r\n                ...state,\r\n                counter: state.minValue,\r\n                text: '',\r\n                error: false\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setCounterValue = (value: number): SetCounterType => ({type: 'SET_COUNTER_VALUE', value})\r\nexport const setMinValue = (value: number): SetMinValueType => ({type: 'SET_MIN_VALUE', value})\r\nexport const setMaxValue = (value: number): SetMaxValueType => ({type: 'SET_MAX_VALUE', value})\r\n\r\nexport const makeMessage = (text: string, error: boolean): MakeMessageType => ({type: 'MAKE_MESSAGE', text, error})\r\nexport const setButtonPressed = (): SetButtonPressedType => ({type: 'SET_BUTTON_PRESSED'})","const initialState = {\r\n    buttonDisabled: true,\r\n    minError: false,\r\n    maxError: false\r\n}\r\n\r\nexport type CounterSettingsStateType = typeof initialState\r\n\r\ntype SetButtonDisabledType = {\r\n    type: 'SET_BUTTON_DISABLED'\r\n    value: boolean\r\n}\r\ntype SetMinErrorType = {\r\n    type: 'SET_MIN_ERROR'\r\n    value: boolean\r\n}\r\ntype SetMaxErrorType = {\r\n    type: 'SET_MAX_ERROR'\r\n    value: boolean\r\n}\r\n\r\n\r\nexport type ActionsType =\r\n    SetButtonDisabledType\r\n    | SetMinErrorType\r\n    | SetMaxErrorType\r\n\r\nexport const counterSettingsReducer = (state: CounterSettingsStateType = initialState, action: ActionsType): CounterSettingsStateType => {\r\n    switch (action.type) {\r\n        case 'SET_BUTTON_DISABLED': {\r\n            return {\r\n                ...state,\r\n                buttonDisabled: action.value\r\n            }\r\n        }\r\n        case 'SET_MIN_ERROR': {\r\n            return {\r\n                ...state,\r\n                minError: action.value\r\n            }\r\n        }\r\n        case 'SET_MAX_ERROR': {\r\n            return {\r\n                ...state,\r\n                maxError: action.value\r\n            }\r\n        }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setButtonDisabled = (value: boolean): SetButtonDisabledType => ({type: 'SET_BUTTON_DISABLED', value})\r\nexport const setMinError = (value: boolean): SetMinErrorType => ({type: 'SET_MIN_ERROR', value})\r\nexport const setMaxError = (value: boolean): SetMaxErrorType => ({type: 'SET_MAX_ERROR', value})","import {combineReducers, createStore} from 'redux';\r\nimport {counterReducer} from './counter-reducer';\r\nimport {counterSettingsReducer} from './counterSettings-reducer';\r\nimport {loadFromLocalStorage, saveToLocalStorage} from '../utils/localStorage-utils';\r\n\r\nconst reducers = combineReducers({\r\n    counter: counterReducer,\r\n    counterSettings: counterSettingsReducer\r\n})\r\n\r\nexport type StateType = ReturnType<typeof reducers>\r\n\r\nexport const store = createStore(reducers, loadFromLocalStorage())\r\n\r\nstore.subscribe(() => {\r\n    const state = store.getState()\r\n    saveToLocalStorage(state)\r\n})\r\n\r\n","import {StateType} from '../store/store';\r\n\r\nexport const loadFromLocalStorage = () => {\r\n    const serializedState = localStorage.getItem('counter-state')\r\n    if (serializedState) {\r\n        const loadedState: StateType = JSON.parse(serializedState)\r\n\r\n        if (loadedState.counter.minValue <0 ||\r\n            loadedState.counter.minValue >= loadedState.counter.maxValue) {\r\n            return undefined\r\n        }\r\n\r\n        loadedState.counter.counter=loadedState.counter.minValue\r\n        loadedState.counter.text=''\r\n        loadedState.counter.error=false\r\n        loadedState.counterSettings.buttonDisabled = true\r\n        return loadedState\r\n    }\r\n\r\n    return undefined\r\n}\r\n\r\nexport const saveToLocalStorage = (state: StateType) => {\r\n    localStorage.setItem('counter-state', JSON.stringify(state))\r\n}\r\n","import React from 'react';\r\nimport s from './Display.module.css'\r\n\r\ntype DisplayPropsType = {\r\n    counterValue: number\r\n    text: string\r\n    error: boolean\r\n}\r\n\r\nexport const Display = (props: DisplayPropsType) => {\r\n    let displayValue = props.text\r\n    let addClassName = s.textOK\r\n\r\n    if (props.text) {\r\n        if (props.error) {\r\n            addClassName += ' ' + s.textError\r\n        }\r\n    } else {\r\n        displayValue = props.counterValue.toString()\r\n        addClassName = s.counterOK\r\n        if (props.error) {\r\n            addClassName = s.counterFinish\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.display + ' ' + addClassName}>\r\n            {displayValue}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    disabled: boolean\r\n    callback: () => void\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n\r\n    const onClickHandler = () => {\r\n        props.callback()\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className={s.button}\r\n            disabled={props.disabled}\r\n            onClick={onClickHandler}\r\n        >\r\n            {props.name}\r\n        </button>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Counter.module.css'\r\nimport {Display} from '../Display/Display';\r\nimport {Button} from '../Button/Button';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport { StateType } from '../../store/store';\r\nimport {CounterStateType, setCounterValue} from '../../store/counter-reducer';\r\n\r\n\r\nexport const Counter = () => {\r\n    const counterState = useSelector<StateType,CounterStateType>(state => state.counter)\r\n    const dispatch = useDispatch()\r\n\r\n    const {\r\n        counter,\r\n        minValue,\r\n        maxValue,\r\n        text,\r\n        error,\r\n    } = counterState\r\n\r\n    const increment = () => {\r\n        if (counter < maxValue) {\r\n            dispatch(setCounterValue(counter + 1))\r\n        }\r\n    }\r\n\r\n    const reset = () => {\r\n        dispatch(setCounterValue(minValue))\r\n    }\r\n\r\n    return (\r\n        <div className={s.main}>\r\n\r\n            <Display\r\n                counterValue={counter}\r\n                text={text}\r\n                error={!!text ? error : counter >= maxValue}\r\n            />\r\n\r\n            <div className={s.buttons}>\r\n                <Button\r\n                    name={'Inc'}\r\n                    disabled={!!text || counter >= maxValue}\r\n                    callback={increment}\r\n                />\r\n\r\n                <Button\r\n                    name={'Reset'}\r\n                    disabled={!!text || counter === minValue}\r\n                    callback={reset}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React, { ChangeEvent } from 'react';\r\nimport s from './Changer.module.css'\r\n\r\ntype ChangerPropsType = {\r\n    text: string\r\n    value: number\r\n    changeValue: (value: number) => void\r\n    error: boolean\r\n}\r\n\r\nexport const Changer = (props: ChangerPropsType) => {\r\n    const onChangeValue = (e:ChangeEvent<HTMLInputElement>) => {\r\n        props.changeValue(e.currentTarget.valueAsNumber)\r\n    }\r\n\r\n    return (\r\n        <div className={s.main}>\r\n            <div className={s.name}>\r\n                {props.text}\r\n            </div>\r\n            <input\r\n                className={`${s.input}  ${props.error ? s.error : ''}`}\r\n                type={'number'}\r\n                value={props.value}\r\n                onChange={onChangeValue}\r\n            />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './CounterSettings.module.css';\r\nimport {Button} from '../Button/Button';\r\nimport {Changer} from '../Changer/Changer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {StateType} from '../../store/store';\r\nimport {\r\n    setButtonDisabled,\r\n    setMaxError,\r\n    setMinError\r\n} from '../../store/counterSettings-reducer';\r\nimport {makeMessage, setButtonPressed, setMaxValue, setMinValue} from '../../store/counter-reducer';\r\n\r\nexport const CounterSettings = () => {\r\n    const allState = useSelector<StateType,StateType>(state => state)\r\n    const dispatch = useDispatch()\r\n\r\n    const {\r\n        minValue,\r\n        maxValue,\r\n    } = allState.counter\r\n\r\n    const {\r\n        buttonDisabled,\r\n        minError,\r\n        maxError,\r\n    } = allState.counterSettings\r\n\r\n\r\n    const checkError = (minValue: number, maxValue: number) => {\r\n        const minError = minValue < 0 || minValue >= maxValue\r\n        const maxError = maxValue < 0 || maxValue <= minValue\r\n        dispatch(setMinError(minError))\r\n        dispatch(setMaxError(maxError))\r\n\r\n        const error = minError || maxError\r\n        dispatch(setButtonDisabled(error))\r\n        if (error) {\r\n            dispatch(makeMessage('Incorrect value!', true))\r\n        } else {\r\n            dispatch(makeMessage(`Enter values and press 'Set'`, false))\r\n        }\r\n    }\r\n\r\n    const changeMaxValue = (maxValue: number) => {\r\n        dispatch(setMaxValue(maxValue))\r\n        checkError(minValue, maxValue)\r\n    }\r\n\r\n    const changeMinValue = (minValue: number) => {\r\n        dispatch(setMinValue(minValue))\r\n        checkError(minValue, maxValue)\r\n    }\r\n\r\n    const buttonPressed = () => {\r\n        dispatch(setButtonDisabled(true))\r\n        dispatch(setButtonPressed())\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.main}>\r\n\r\n            <div className={s.changers}>\r\n                <Changer\r\n                    text={'max value:'}\r\n                    value={maxValue}\r\n                    changeValue={changeMaxValue}\r\n                    error={maxError}\r\n                />\r\n\r\n                <Changer\r\n                    text={'start value:'}\r\n                    value={minValue}\r\n                    changeValue={changeMinValue}\r\n                    error={minError}\r\n                />\r\n            </div>\r\n\r\n            <div className={s.buttons}>\r\n                <Button\r\n                    name={'Set'}\r\n                    disabled={buttonDisabled}\r\n                    callback={buttonPressed}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './CounterWithParams.module.css'\r\nimport {Counter} from '../Counter/Counter';\r\nimport {CounterSettings} from '../CounterSettings/CounterSettings';\r\n\r\n\r\nexport const CounterWithParams = () => {\r\n    return (\r\n        <div className={s.main}>\r\n            <CounterSettings/>\r\n            <Counter/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './store/store';\r\nimport { CounterWithParams } from './components/CounterWithParams/CounterWithParams';\r\n\r\nfunction App() {\r\n    return (\r\n        <Provider store={store}>\r\n            <CounterWithParams/>\r\n        </Provider>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}