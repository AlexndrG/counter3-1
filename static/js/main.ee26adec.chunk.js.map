{"version":3,"sources":["components/Display/Display.module.css","components/Changer/Changer.module.css","components/CounterSettings/CounterSettings.module.css","components/Counter/Counter.module.css","components/CounterWithParams/CounterWithParams.module.css","components/Button/Button.module.css","store/counter-reducer.ts","store/counterSettings-reducer.ts","store/store.ts","utils/localStorage-utils.ts","components/Button/Button.tsx","components/Changer/Changer.tsx","components/CounterSettings/CounterSettingsContainer.tsx","components/CounterSettings/CounterSettings.tsx","components/Display/Display.tsx","components/Counter/CounterContainer.ts","components/Counter/Counter.tsx","components/CounterWithParams/CounterWithParamsContainer.tsx","components/CounterWithParams/CounterWithParams.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","initialState","counter","minValue","maxValue","text","error","setCounterValue","value","type","setMinValue","setMaxValue","buttonDisabled","minError","maxError","reducers","combineReducers","state","action","counterSettings","store","createStore","serializedState","localStorage","getItem","loadedState","JSON","parse","loadFromLocalStorage","subscribe","getState","stateMinValue","stateMaxValue","setItem","stringify","saveToLocalStorage","Button","props","className","s","button","disabled","onClick","callback","name","Changer","main","input","onChange","e","changeValue","currentTarget","valueAsNumber","CounterSettingsContainer","connect","makeMessage","setButtonPressed","setButtonDisabled","setMinError","setMaxError","checkError","changers","buttons","Display","displayValue","addClassName","textOK","textError","counterValue","toString","counterOK","counterFinish","display","CounterContainer","CounterWithParamsContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,UAAY,2BAA2B,cAAgB,+BAA+B,OAAS,wBAAwB,UAAY,6B,gBCAxLD,EAAOC,QAAU,CAAC,KAAO,sBAAsB,KAAO,sBAAsB,MAAQ,uBAAuB,MAAQ,yB,iBCAnHD,EAAOC,QAAU,CAAC,KAAO,8BAA8B,SAAW,kCAAkC,QAAU,mC,mBCA9GD,EAAOC,QAAU,CAAC,KAAO,sBAAsB,QAAU,2B,iBCAzDD,EAAOC,QAAU,CAAC,KAAO,kC,gBCAzBD,EAAOC,QAAU,CAAC,OAAS,yB,yJCEdC,EAAe,CACxBC,QAJ0B,EAK1BC,SAL0B,EAM1BC,SAL0B,EAM1BC,KAAM,GACNC,OAAO,GA+EEC,EAAkB,SAACC,GAAD,MAAoC,CAACC,KAAM,oBAAqBD,UAClFE,EAAc,SAACF,GAAD,MAAqC,CAACC,KAAM,gBAAiBD,UAC3EG,EAAc,SAACH,GAAD,MAAqC,CAACC,KAAM,gBAAiBD,UCzFlFP,EAAe,CACjBW,gBAAgB,EAChBC,UAAU,EACVC,UAAU,GCERC,EAAWC,YAAgB,CAC7Bd,QFsC0B,WAAoF,IAAnFe,EAAkF,uDAAxDhB,EAAciB,EAA0C,uCAC7G,OAAQA,EAAOT,MACX,IAAK,oBACD,OAAO,2BACAQ,GADP,IAEIf,QAASgB,EAAOV,QAGxB,IAAK,gBACD,OAAO,2BACAS,GADP,IAEId,SAAUe,EAAOV,QAGzB,IAAK,gBACD,OAAO,2BACAS,GADP,IAEIb,SAAUc,EAAOV,QAIzB,IAAK,eACD,OAAO,2BACAS,GADP,IAEIZ,KAAMa,EAAOb,KACbC,MAAOY,EAAOZ,QAItB,IAAK,qBACD,OAAO,2BACAW,GADP,IAEIf,QAASe,EAAMd,SACfE,KAAM,GACNC,OAAO,IAIf,QACI,OAAOW,IE5EfE,gBDoBkC,WAAoG,IAAnGF,EAAkG,uDAAhEhB,EAAciB,EAAkD,uCACrI,OAAQA,EAAOT,MACX,IAAK,sBACD,OAAO,2BACAQ,GADP,IAEIL,eAAgBM,EAAOV,QAG/B,IAAK,gBACD,OAAO,2BACAS,GADP,IAEIJ,SAAUK,EAAOV,QAGzB,IAAK,gBACD,OAAO,2BACAS,GADP,IAEIH,SAAUI,EAAOV,QAKzB,QACI,OAAOS,MCtCNG,EAAQC,YAAYN,ECVG,WAChC,IAAMO,EAAkBC,aAAaC,QAAQ,iBAC7C,GAAIF,EAAiB,CACjB,IAAMG,EAAyBC,KAAKC,MAAML,GAE1C,GAAIG,EAAYvB,QAAQC,SAAU,GAC9BsB,EAAYvB,QAAQC,UAAYsB,EAAYvB,QAAQE,SACpD,OAOJ,OAJAqB,EAAYvB,QAAQA,QAAQuB,EAAYvB,QAAQC,SAChDsB,EAAYvB,QAAQG,KAAK,GACzBoB,EAAYvB,QAAQI,OAAM,EAC1BmB,EAAYN,gBAAgBP,gBAAiB,EACtCa,GDJ4BG,IAEvCzB,GAAY,EACZC,GAAY,EAEhBgB,EAAMS,WAAU,WACZ,IAAMZ,EAAQG,EAAMU,WACdC,EAAgBd,EAAMf,QAAQC,SAC9B6B,EAAgBf,EAAMf,QAAQE,SAChCD,IAAa4B,GAAiB3B,IAAa4B,KCCjB,SAACf,GAC/BM,aAAaU,QAAQ,gBAAiBP,KAAKQ,UAAUjB,IDDjDkB,CAAmBlB,GACnBd,EAAS4B,EACT3B,EAAS4B,M,6DEfJI,EAAS,SAACC,GAMnB,OACI,wBACIC,UAAWC,IAAEC,OACbC,SAAUJ,EAAMI,SAChBC,QARe,WACnBL,EAAMM,YAIN,SAKKN,EAAMO,Q,gBCXNC,EAAU,SAACR,GAKpB,OACI,sBAAKC,UAAWC,IAAEO,KAAlB,UACI,qBAAKR,UAAWC,IAAEK,KAAlB,SACKP,EAAMhC,OAEX,uBACIiC,UAAS,UAAKC,IAAEQ,MAAP,aAAiBV,EAAM/B,MAAQiC,IAAEjC,MAAQ,IAClDG,KAAM,SACND,MAAO6B,EAAM7B,MACbwC,SAbU,SAACC,GACnBZ,EAAMa,YAAYD,EAAEE,cAAcC,sBC8B7BC,EAA2BC,aAThB,SAACrC,GAAD,MAAuB,CAC3Cd,SAAUc,EAAMf,QAAQC,SACxBC,SAAUa,EAAMf,QAAQE,SAExBQ,eAAgBK,EAAME,gBAAgBP,eACtCC,SAAUI,EAAME,gBAAgBN,SAChCC,SAAUG,EAAME,gBAAgBL,YAIhC,CACIyC,YN+CmB,SAAClD,EAAcC,GAAf,MAAoD,CAACG,KAAM,eAAgBJ,OAAMC,UM9CpGkD,iBN+CwB,iBAA6B,CAAC/C,KAAM,uBM9C5DC,cACAC,cACA8C,kBLMyB,SAACjD,GAAD,MAA4C,CAACC,KAAM,sBAAuBD,UKLnGkD,YLMmB,SAAClD,GAAD,MAAsC,CAACC,KAAM,gBAAiBD,UKLjFmD,YLMmB,SAACnD,GAAD,MAAsC,CAACC,KAAM,gBAAiBD,WKdjD8C,ECpCT,SAACjB,GAC5B,IAAMuB,EAAa,SAACzD,EAAkBC,GAClC,IAAMS,EAAWV,EAAW,GAAKA,GAAYC,EACvCU,EAAWV,EAAW,GAAKA,GAAYD,EAC7CkC,EAAMqB,YAAY7C,GAClBwB,EAAMsB,YAAY7C,GAElB,IAAMR,EAAQO,GAAYC,EAC1BuB,EAAMoB,kBAAkBnD,GACpBA,EACA+B,EAAMkB,YAAY,oBAAoB,GAEtClB,EAAMkB,YAAN,gCAAkD,IAoB1D,OACI,sBAAKjB,UAAWC,IAAEO,KAAlB,UAEI,sBAAKR,UAAWC,IAAEsB,SAAlB,UACI,cAAC,EAAD,CACIxD,KAAM,aACNG,MAAO6B,EAAMjC,SACb8C,YAvBO,SAAC9C,GACpBiC,EAAM1B,YAAYP,GAClBwD,EAAWvB,EAAMlC,SAAUC,IAsBfE,MAAO+B,EAAMvB,WAGjB,cAAC,EAAD,CACIT,KAAM,eACNG,MAAO6B,EAAMlC,SACb+C,YAzBO,SAAC/C,GACpBkC,EAAM3B,YAAYP,GAClByD,EAAWzD,EAAUkC,EAAMjC,WAwBfE,MAAO+B,EAAMxB,cAIrB,qBAAKyB,UAAWC,IAAEuB,QAAlB,SACI,cAAC,EAAD,CACIlB,KAAM,MACNH,SAAUJ,EAAMzB,eAChB+B,SA7BS,WACrBN,EAAMoB,mBAAkB,GACxBpB,EAAMmB,8B,iCCzBDO,EAAU,SAAC1B,GACpB,IAAI2B,EAAe3B,EAAMhC,KACrB4D,EAAe1B,IAAE2B,OAcrB,OAZI7B,EAAMhC,KACFgC,EAAM/B,QACN2D,GAAgB,IAAM1B,IAAE4B,YAG5BH,EAAe3B,EAAM+B,aAAaC,WAClCJ,EAAe1B,IAAE+B,UACbjC,EAAM/B,QACN2D,EAAe1B,IAAEgC,gBAKrB,qBAAKjC,UAAWC,IAAEiC,QAAU,IAAMP,EAAlC,SACKD,KCGAS,EAAmBnB,aATR,SAACrC,GAAD,MAAuB,CAC3Cf,QAASe,EAAMf,QAAQA,QACvBC,SAAUc,EAAMf,QAAQC,SACxBC,SAAUa,EAAMf,QAAQE,SACxBC,KAAMY,EAAMf,QAAQG,KACpBC,MAAOW,EAAMf,QAAQI,SAKrB,CACIC,mBAFwB+C,ECvBT,SAACjB,GAWpB,OACI,sBAAKC,UAAWC,IAAEO,KAAlB,UAEI,cAAC,EAAD,CACIsB,aAAc/B,EAAMnC,QACpBG,KAAMgC,EAAMhC,KACZC,MAAS+B,EAAMhC,KAAOgC,EAAM/B,MAAQ+B,EAAMnC,SAAWmC,EAAMjC,WAG/D,sBAAKkC,UAAWC,IAAEuB,QAAlB,UACI,cAAC,EAAD,CACIlB,KAAM,MACNH,WAAYJ,EAAMhC,MAAQgC,EAAMnC,SAAWmC,EAAMjC,SACjDuC,SAvBE,WACVN,EAAMnC,QAAUmC,EAAMjC,UACtBiC,EAAM9B,gBAAgB8B,EAAMnC,QAAU,MAwBlC,cAAC,EAAD,CACI0C,KAAM,QACNH,WAAYJ,EAAMhC,MAAQgC,EAAMnC,UAAYmC,EAAMlC,SAClDwC,SAvBF,WACVN,EAAM9B,gBAAgB8B,EAAMlC,sBCevBuE,EAA6BpB,aARlB,SAACrC,GAAD,MAA4C,CAChEf,QAASe,EAAMf,QAAQA,QACvBC,SAAUc,EAAMf,QAAQC,SACxBC,SAAUa,EAAMf,QAAQE,SACxBC,KAAMY,EAAMf,QAAQG,KACpBC,MAAOW,EAAMf,QAAQI,SAIrB,CACIC,kBACAG,cACAC,eAJkC2C,ECxBT,WAC7B,OACI,sBAAKhB,UAAWC,IAAEO,KAAlB,UACI,cAACO,EAAD,IACA,cAACoB,EAAD,UCIGE,MARf,WACI,OACI,cAAC,IAAD,CAAUvD,MAAOA,EAAjB,SACI,cAACsD,EAAD,OCKGE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ee26adec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2tMqQ\",\"counterOK\":\"Display_counterOK__oh4WL\",\"counterFinish\":\"Display_counterFinish__823N7\",\"textOK\":\"Display_textOK__1ZNKX\",\"textError\":\"Display_textError__2AkCl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Changer_main__2giff\",\"name\":\"Changer_name__2uJKh\",\"input\":\"Changer_input__1u77M\",\"error\":\"Changer_error__3jKR1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"CounterSettings_main__32TVI\",\"changers\":\"CounterSettings_changers__3hC1_\",\"buttons\":\"CounterSettings_buttons__3JWZ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Counter_main__GgNRR\",\"buttons\":\"Counter_buttons__1bQDg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"CounterWithParams_main__z9vwY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__uPfkH\"};","export const INIT_MIN_VALUE = 0;\r\nexport const INIT_MAX_VALUE = 5;\r\n\r\nexport const initialState = {\r\n    counter: INIT_MIN_VALUE,\r\n    minValue: INIT_MIN_VALUE,\r\n    maxValue: INIT_MAX_VALUE,\r\n    text: '',\r\n    error: false,\r\n}\r\n\r\ntype CounterStateType = typeof initialState\r\n\r\n\r\n\r\ntype SetCounterType = {\r\n    type: 'SET_COUNTER_VALUE'\r\n    value: number\r\n}\r\ntype SetMinValueType = {\r\n    type: 'SET_MIN_VALUE'\r\n    value: number\r\n}\r\ntype SetMaxValueType = {\r\n    type: 'SET_MAX_VALUE'\r\n    value: number\r\n}\r\n\r\ntype MakeMessageType = {\r\n    type: 'MAKE_MESSAGE'\r\n    text: string\r\n    error: boolean\r\n}\r\ntype SetButtonPressedType = {\r\n    type: 'SET_BUTTON_PRESSED'\r\n}\r\n\r\nexport type ActionsType =\r\n    SetCounterType\r\n    | SetMinValueType\r\n    | SetMaxValueType\r\n    | MakeMessageType\r\n    | SetButtonPressedType\r\n\r\nexport const counterReducer = (state: CounterStateType = initialState, action: ActionsType): CounterStateType => {\r\n    switch (action.type) {\r\n        case 'SET_COUNTER_VALUE': {\r\n            return {\r\n                ...state,\r\n                counter: action.value\r\n            }\r\n        }\r\n        case 'SET_MIN_VALUE': {\r\n            return {\r\n                ...state,\r\n                minValue: action.value\r\n            }\r\n        }\r\n        case 'SET_MAX_VALUE': {\r\n            return {\r\n                ...state,\r\n                maxValue: action.value\r\n            }\r\n        }\r\n\r\n        case 'MAKE_MESSAGE': {\r\n            return {\r\n                ...state,\r\n                text: action.text,\r\n                error: action.error\r\n            }\r\n        }\r\n\r\n        case 'SET_BUTTON_PRESSED': {\r\n            return {\r\n                ...state,\r\n                counter: state.minValue,\r\n                text: '',\r\n                error: false\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setCounterValue = (value: number): SetCounterType => ({type: 'SET_COUNTER_VALUE', value})\r\nexport const setMinValue = (value: number): SetMinValueType => ({type: 'SET_MIN_VALUE', value})\r\nexport const setMaxValue = (value: number): SetMaxValueType => ({type: 'SET_MAX_VALUE', value})\r\n\r\nexport const makeMessage = (text: string, error: boolean): MakeMessageType => ({type: 'MAKE_MESSAGE', text, error})\r\nexport const setButtonPressed = (): SetButtonPressedType => ({type: 'SET_BUTTON_PRESSED'})","const initialState = {\r\n    buttonDisabled: true,\r\n    minError: false,\r\n    maxError: false\r\n}\r\n\r\ntype CounterSettingsStateType = typeof initialState\r\n\r\ntype SetButtonDisabledType = {\r\n    type: 'SET_BUTTON_DISABLED'\r\n    value: boolean\r\n}\r\ntype SetMinErrorType = {\r\n    type: 'SET_MIN_ERROR'\r\n    value: boolean\r\n}\r\ntype SetMaxErrorType = {\r\n    type: 'SET_MAX_ERROR'\r\n    value: boolean\r\n}\r\n\r\n\r\nexport type ActionsType =\r\n    SetButtonDisabledType\r\n    | SetMinErrorType\r\n    | SetMaxErrorType\r\n\r\nexport const counterSettingsReducer = (state: CounterSettingsStateType = initialState, action: ActionsType): CounterSettingsStateType => {\r\n    switch (action.type) {\r\n        case 'SET_BUTTON_DISABLED': {\r\n            return {\r\n                ...state,\r\n                buttonDisabled: action.value\r\n            }\r\n        }\r\n        case 'SET_MIN_ERROR': {\r\n            return {\r\n                ...state,\r\n                minError: action.value\r\n            }\r\n        }\r\n        case 'SET_MAX_ERROR': {\r\n            return {\r\n                ...state,\r\n                maxError: action.value\r\n            }\r\n        }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setButtonDisabled = (value: boolean): SetButtonDisabledType => ({type: 'SET_BUTTON_DISABLED', value})\r\nexport const setMinError = (value: boolean): SetMinErrorType => ({type: 'SET_MIN_ERROR', value})\r\nexport const setMaxError = (value: boolean): SetMaxErrorType => ({type: 'SET_MAX_ERROR', value})","import {combineReducers, createStore} from 'redux';\r\nimport {counterReducer} from './counter-reducer';\r\nimport {counterSettingsReducer} from './counterSettings-reducer';\r\nimport {loadFromLocalStorage, saveToLocalStorage} from '../utils/localStorage-utils';\r\n\r\nconst reducers = combineReducers({\r\n    counter: counterReducer,\r\n    counterSettings: counterSettingsReducer\r\n})\r\n\r\nexport type StateType = ReturnType<typeof reducers>\r\n\r\nexport const store = createStore(reducers, loadFromLocalStorage())\r\n\r\nlet minValue = -1\r\nlet maxValue = -1\r\n\r\nstore.subscribe(() => {\r\n    const state = store.getState()\r\n    const stateMinValue = state.counter.minValue\r\n    const stateMaxValue = state.counter.maxValue\r\n    if (minValue !== stateMinValue || maxValue !== stateMaxValue) {\r\n        saveToLocalStorage(state)\r\n        minValue=stateMinValue\r\n        maxValue=stateMaxValue\r\n    }\r\n})\r\n\r\n","import {StateType} from '../store/store';\r\n\r\nexport const loadFromLocalStorage = () => {\r\n    const serializedState = localStorage.getItem('counter-state')\r\n    if (serializedState) {\r\n        const loadedState: StateType = JSON.parse(serializedState)\r\n\r\n        if (loadedState.counter.minValue <0 ||\r\n            loadedState.counter.minValue >= loadedState.counter.maxValue) {\r\n            return undefined\r\n        }\r\n\r\n        loadedState.counter.counter=loadedState.counter.minValue\r\n        loadedState.counter.text=''\r\n        loadedState.counter.error=false\r\n        loadedState.counterSettings.buttonDisabled = false\r\n        return loadedState\r\n    }\r\n\r\n    return undefined\r\n}\r\n\r\nexport const saveToLocalStorage = (state: StateType) => {\r\n    localStorage.setItem('counter-state', JSON.stringify(state))\r\n}\r\n\r\n\r\n/*\r\n\r\nimport {INIT_MAX_VALUE, INIT_MIN_VALUE} from '../store/counter-reducer';\r\n\r\nconst MIN_VALUE_NAME = 'CounterMinValue'\r\nconst MAX_VALUE_NAME = 'CounterMaxValue'\r\n\r\nexport const loadFromLocalStorage = ():number[] => {\r\n    const minString = localStorage.getItem(MIN_VALUE_NAME)\r\n    const maxString = localStorage.getItem(MAX_VALUE_NAME)\r\n\r\n    if (minString && maxString) {\r\n        const minNumber = JSON.parse(minString)\r\n        const maxNumber = JSON.parse(maxString)\r\n        return [minNumber, maxNumber]\r\n    }\r\n\r\n    return [INIT_MIN_VALUE, INIT_MAX_VALUE]\r\n}\r\n\r\nexport const SaveToLocalStorage = (data: number[]) => {\r\n    localStorage.setItem(MIN_VALUE_NAME, JSON.stringify(data[0]))\r\n    localStorage.setItem(MAX_VALUE_NAME, JSON.stringify(data[1]))\r\n}\r\n\r\n*/","import React from 'react';\r\nimport s from './Button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    disabled: boolean\r\n    callback: () => void\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n\r\n    const onClickHandler = () => {\r\n        props.callback()\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className={s.button}\r\n            disabled={props.disabled}\r\n            onClick={onClickHandler}\r\n        >\r\n            {props.name}\r\n        </button>\r\n    )\r\n}","import React, { ChangeEvent } from 'react';\r\nimport s from './Changer.module.css'\r\n\r\ntype ChangerPropsType = {\r\n    text: string\r\n    value: number\r\n    changeValue: (value: number) => void\r\n    error: boolean\r\n}\r\n\r\nexport const Changer = (props: ChangerPropsType) => {\r\n    const onChangeValue = (e:ChangeEvent<HTMLInputElement>) => {\r\n        props.changeValue(e.currentTarget.valueAsNumber)\r\n    }\r\n\r\n    return (\r\n        <div className={s.main}>\r\n            <div className={s.name}>\r\n                {props.text}\r\n            </div>\r\n            <input\r\n                className={`${s.input}  ${props.error ? s.error : ''}`}\r\n                type={'number'}\r\n                value={props.value}\r\n                onChange={onChangeValue}\r\n            />\r\n        </div>\r\n    )\r\n}","import {connect} from 'react-redux';\r\nimport {StateType} from '../../store/store';\r\nimport {CounterSettings} from './CounterSettings';\r\nimport {\r\n    makeMessage,\r\n    setButtonPressed,\r\n    setMaxValue,\r\n    setMinValue\r\n} from '../../store/counter-reducer';\r\nimport {setButtonDisabled, setMaxError, setMinError} from '../../store/counterSettings-reducer';\r\n\r\ntype MapStateToPropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n\r\n    buttonDisabled: boolean\r\n    minError: boolean\r\n    maxError: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    makeMessage: (text: string, error: boolean) => void\r\n    setButtonPressed: () => void\r\n    setMinValue: (value: number) => void\r\n    setMaxValue: (value: number) => void\r\n\r\n    setButtonDisabled: (value: boolean) => void\r\n    setMinError: (value: boolean) => void\r\n    setMaxError: (value: boolean) => void\r\n}\r\n\r\nexport type CounterSettingsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    minValue: state.counter.minValue,\r\n    maxValue: state.counter.maxValue,\r\n\r\n    buttonDisabled: state.counterSettings.buttonDisabled,\r\n    minError: state.counterSettings.minError,\r\n    maxError: state.counterSettings.maxError,\r\n})\r\n\r\nexport const CounterSettingsContainer = connect(mapStateToProps,\r\n    {\r\n        makeMessage,\r\n        setButtonPressed,\r\n        setMinValue,\r\n        setMaxValue,\r\n        setButtonDisabled,\r\n        setMinError,\r\n        setMaxError\r\n    })(CounterSettings)","import React from 'react';\r\nimport s from './CounterSettings.module.css';\r\nimport {Button} from '../Button/Button';\r\nimport {Changer} from '../Changer/Changer';\r\nimport { CounterSettingsPropsType } from './CounterSettingsContainer';\r\n\r\nexport const CounterSettings = (props: CounterSettingsPropsType) => {\r\n    const checkError = (minValue: number, maxValue: number) => {\r\n        const minError = minValue < 0 || minValue >= maxValue\r\n        const maxError = maxValue < 0 || maxValue <= minValue\r\n        props.setMinError(minError)\r\n        props.setMaxError(maxError)\r\n\r\n        const error = minError || maxError\r\n        props.setButtonDisabled(error)\r\n        if (error) {\r\n            props.makeMessage('Incorrect value!', true)\r\n        } else {\r\n            props.makeMessage(`Enter values and press 'Set'`, false)\r\n        }\r\n    }\r\n\r\n    const changeMaxValue = (maxValue: number) => {\r\n        props.setMaxValue(maxValue)\r\n        checkError(props.minValue, maxValue)\r\n    }\r\n\r\n    const changeMinValue = (minValue: number) => {\r\n        props.setMinValue(minValue)\r\n        checkError(minValue, props.maxValue)\r\n    }\r\n\r\n    const setButtonPressed = () => {\r\n        props.setButtonDisabled(true)\r\n        props.setButtonPressed()\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.main}>\r\n\r\n            <div className={s.changers}>\r\n                <Changer\r\n                    text={'max value:'}\r\n                    value={props.maxValue}\r\n                    changeValue={changeMaxValue}\r\n                    error={props.maxError}\r\n                />\r\n\r\n                <Changer\r\n                    text={'start value:'}\r\n                    value={props.minValue}\r\n                    changeValue={changeMinValue}\r\n                    error={props.minError}\r\n                />\r\n            </div>\r\n\r\n            <div className={s.buttons}>\r\n                <Button\r\n                    name={'Set'}\r\n                    disabled={props.buttonDisabled}\r\n                    callback={setButtonPressed}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Display.module.css'\r\n\r\ntype DisplayPropsType = {\r\n    counterValue: number\r\n    text: string\r\n    error: boolean\r\n}\r\n\r\nexport const Display = (props: DisplayPropsType) => {\r\n    let displayValue = props.text\r\n    let addClassName = s.textOK\r\n\r\n    if (props.text) {\r\n        if (props.error) {\r\n            addClassName += ' ' + s.textError\r\n        }\r\n    } else {\r\n        displayValue = props.counterValue.toString()\r\n        addClassName = s.counterOK\r\n        if (props.error) {\r\n            addClassName = s.counterFinish\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.display + ' ' + addClassName}>\r\n            {displayValue}\r\n        </div>\r\n    )\r\n}","import {connect} from 'react-redux';\r\nimport {Counter} from './Counter';\r\nimport {StateType} from '../../store/store';\r\nimport {setCounterValue} from '../../store/counter-reducer';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    counter: number\r\n    minValue: number\r\n    maxValue: number\r\n    text: string\r\n    error: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    setCounterValue: (value: number) => void\r\n}\r\n\r\nexport type CounterPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    counter: state.counter.counter,\r\n    minValue: state.counter.minValue,\r\n    maxValue: state.counter.maxValue,\r\n    text: state.counter.text,\r\n    error: state.counter.error\r\n})\r\n\r\n\r\nexport const CounterContainer = connect(mapStateToProps,\r\n    {\r\n        setCounterValue\r\n    })(Counter)","import React from 'react';\r\nimport s from './Counter.module.css'\r\nimport {Display} from '../Display/Display';\r\nimport {Button} from '../Button/Button';\r\nimport {CounterPropsType} from './CounterContainer';\r\n\r\n\r\nexport const Counter = (props: CounterPropsType) => {\r\n    const increment = () => {\r\n        if (props.counter < props.maxValue) {\r\n            props.setCounterValue(props.counter + 1)\r\n        }\r\n    }\r\n\r\n    const reset = () => {\r\n        props.setCounterValue(props.minValue)\r\n    }\r\n\r\n    return (\r\n        <div className={s.main}>\r\n\r\n            <Display\r\n                counterValue={props.counter}\r\n                text={props.text}\r\n                error={!!props.text ? props.error : props.counter >= props.maxValue}\r\n            />\r\n\r\n            <div className={s.buttons}>\r\n                <Button\r\n                    name={'Inc'}\r\n                    disabled={!!props.text || props.counter >= props.maxValue}\r\n                    callback={increment}\r\n                />\r\n\r\n                <Button\r\n                    name={'Reset'}\r\n                    disabled={!!props.text || props.counter === props.minValue}\r\n                    callback={reset}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import {connect} from 'react-redux';\r\nimport {CounterWithParams} from './CounterWithParams';\r\nimport {StateType} from '../../store/store';\r\nimport {setCounterValue, setMaxValue, setMinValue} from '../../store/counter-reducer';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    counter: number\r\n    minValue: number\r\n    maxValue: number\r\n    text: string\r\n    error: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    setCounterValue: (value: number) => void\r\n    setMinValue: (value: number) => void\r\n    setMaxValue: (value: number) => void\r\n}\r\n\r\nexport type CounterWithParamsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStateToPropsType => ({\r\n    counter: state.counter.counter,\r\n    minValue: state.counter.minValue,\r\n    maxValue: state.counter.maxValue,\r\n    text: state.counter.text,\r\n    error: state.counter.error,\r\n})\r\n\r\nexport const CounterWithParamsContainer = connect(mapStateToProps,\r\n    {\r\n        setCounterValue,\r\n        setMinValue,\r\n        setMaxValue\r\n    })(CounterWithParams)","import React from 'react';\r\nimport s from './CounterWithParams.module.css'\r\nimport {CounterSettingsContainer} from '../CounterSettings/CounterSettingsContainer';\r\nimport {CounterContainer} from '../Counter/CounterContainer';\r\n\r\n\r\nexport const CounterWithParams = () => {\r\n    return (\r\n        <div className={s.main}>\r\n            <CounterSettingsContainer/>\r\n            <CounterContainer/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './store/store';\r\nimport { CounterWithParamsContainer } from './components/CounterWithParams/CounterWithParamsContainer';\r\n\r\nfunction App() {\r\n    return (\r\n        <Provider store={store}>\r\n            <CounterWithParamsContainer/>\r\n        </Provider>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}